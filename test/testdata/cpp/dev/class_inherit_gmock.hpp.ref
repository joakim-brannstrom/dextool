#ifndef test_double_gmock_hpp
#define test_double_gmock_hpp
#include "test_double.hpp"
#include "gmock/gmock.h"

namespace TestDouble {
class MockA : public A {
public:
    virtual ~MockA() {}

    MOCK_METHOD0(a, void());
};
} //NS:TestDouble

namespace TestDouble {
class MockVirtA : public VirtA {
public:
    virtual ~MockVirtA() {}

    MOCK_METHOD0(virtA, void());
};
} //NS:TestDouble

namespace TestDouble {
class MockVirtB : public VirtB {
public:
    virtual ~MockVirtB() {}

    MOCK_METHOD0(virtA, void());
    MOCK_METHOD0(virtB, void());
};
} //NS:TestDouble

namespace TestDouble {
class MockVirtC : public VirtC {
public:
    virtual ~MockVirtC() {}

    MOCK_METHOD0(virtA, void());
    MOCK_METHOD0(virtB, void());
    MOCK_METHOD0(virtC, void());
};
} //NS:TestDouble

namespace TestDouble {
class MockDupA : public DupA {
public:
    virtual ~MockDupA() {}

    MOCK_METHOD0(dupFunc, void());
};
} //NS:TestDouble

namespace TestDouble {
class MockDupB : public DupB {
public:
    virtual ~MockDupB() {}

    MOCK_METHOD0(dupFunc, void());
};
} //NS:TestDouble

namespace TestDouble {
class MockDup : public Dup {
public:
    virtual ~MockDup() {}

    MOCK_METHOD0(dupFunc, void());
};
} //NS:TestDouble

namespace ns1 {
namespace ns2 {
namespace TestDouble {
class MockNs2B : public ::ns1::ns2::Ns2B {
public:
    virtual ~MockNs2B() {}

    MOCK_METHOD0(a, void());
};
} //NS:TestDouble

} //NS:ns2
namespace TestDouble {
class MockNs1A : public ::ns1::Ns1A {
public:
    virtual ~MockNs1A() {}

    MOCK_METHOD0(a, void());
};
} //NS:TestDouble

} //NS:ns1
#endif // test_double_gmock_hpp

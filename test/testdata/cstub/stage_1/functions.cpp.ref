#include "test_double.hpp"

namespace {
TestDouble::I_TestDouble* test_double_inst = 0;
} //NS:

namespace TestDouble {
Adapter::Adapter(I_TestDouble& inst) {
    test_double_inst = &inst;
}

Adapter::~Adapter() {
    test_double_inst = 0;
}

} //NS:TestDouble

extern "C" {
const int c_func_one_named(const int a) {
    return test_double_inst->c_func_one_named(a);
}

const int c_func_return() {
    return test_double_inst->c_func_return();
}

int func_extern(int out) {
    return test_double_inst->func_extern(out);
}

int func_one_named(int a) {
    return test_double_inst->func_one_named(a);
}

int func_return() {
    return test_double_inst->func_return();
}

int func_variadic_one_unnamed(char *x0, ...) {
    return test_double_inst->func_variadic_one_unnamed(x0);
}

void array_func(int x, int *y, int z[16]) {
    test_double_inst->array_func(x, y, z);
}

void array_func_param_typedef(MyIntType x0[16]) {
    test_double_inst->array_func_param_typedef(z);
}

void c_func_three_named(const int a, const int b, const int c) {
    test_double_inst->c_func_three_named(a, b, c);
}

void c_func_two_named(const int a, const int b) {
    test_double_inst->c_func_two_named(a, b);
}

void c_func_with_struct(const struct A *a) {
    test_double_inst->c_func_with_struct(a);
}

void fun(func_ptr2 p, Something_Big b) {
    test_double_inst->fun(p, b);
}

void func_ptr_arg(int (*a)(int p, int ), int b) {
    test_double_inst->func_ptr_arg(a, b);
}

void func_three_named(int a, int b, int c) {
    test_double_inst->func_three_named(a, b, c);
}

void func_two_named(int a, int b) {
    test_double_inst->func_two_named(a, b);
}

void func_variadic() {
    test_double_inst->func_variadic();
}

void func_void() {
    test_double_inst->func_void();
}

void unnamed_params(int x0, int x1) {
    test_double_inst->unnamed_params(x0, x1);
}

}

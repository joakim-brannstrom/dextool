#ifndef test_double_hpp
#define test_double_hpp
extern "C" {
#include "function_pointers.h"
}

namespace TestDouble {
class I_TestDouble {
public:
    virtual func_type * cyber(const unsigned int baz) = 0;
    virtual func_type * leopard(const unsigned int baz) = 0;
    virtual void tiger() = 0;
    virtual int typedef_array_func(int *x, int z[16]) = 0;
    virtual ~I_TestDouble() {}
};

class I_TestDouble_InitGlobals {
public:
    virtual void e_a() = 0;
    virtual void e_array_func() = 0;
    virtual void e_b() = 0;
    virtual void e_c() = 0;
    virtual void e_e() = 0;
    virtual void e_f() = 0;
    virtual void e_g() = 0;
    virtual void hest() = 0;
    virtual ~I_TestDouble_InitGlobals() {}
};

class Test_ZeroGlobals : public I_TestDouble_InitGlobals {
public:
    Test_ZeroGlobals();
    virtual void e_a();
    virtual void e_array_func();
    virtual void e_b();
    virtual void e_c();
    virtual void e_e();
    virtual void e_f();
    virtual void e_g();
    virtual void hest();
    virtual ~Test_ZeroGlobals();
};

///
///
class Adapter {
public:
    Adapter(I_TestDouble &inst);
    Adapter(I_TestDouble &inst, I_TestDouble_InitGlobals &init_globals);
    ~Adapter();
};

} //NS:TestDouble

#endif // test_double_hpp

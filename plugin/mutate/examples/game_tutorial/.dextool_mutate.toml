[workarea]

# base path (absolute or relative) to look for C/C++ files to mutate.
root = "."

# only those files that fully match the glob filter will be mutated.
# glob filter are relative to root.
include = ["src/*"]
exclude = []

[generic]

# default mutants to test if none is specified by --mutant
# note that this affects the analyze phase thus the --mutant argument must be one of those specified here
# available options are: ["all", "ror", "rorp", "lcr", "aor", "uoi", "sdl", "dcr", "lcrb", "cr"]
# **FOR THE READER**
# the recommended is ["lcr", "lcrb", "sdl", "uoi", "dcr"]
# but the config only uses lcr/lcrb so **you** will quickly will get to test
# the test and report phase.
mutants = ["lcr", "lcrb", "sdl", "uoi", "dcr", "aors", "rorp"]

[analyze]

# glob filter which include/exclude matched files (relative to root) from analysis.
# include = ["*"]
exclude = [ "deps/*", "test/*"]

# number of threads to be used for analysis (default is the number of cores).
# threads = 1

# remove files from the database that are no longer found during analysis.
prune = true

# checksum the files in this directories and warn if a mutation status is older
# than the newest file. The path can be a file or a directory. Directories
# are traveresed. All paths are relative to root.
test_paths = ["test"]

# glob filter which include/exclude matched test files (relative to root) from analysis.
# test_include = ["*/*.ext"]
# test_exclude = []

id_algo = "relaxed"

[schema]
# Use scheman to reduce the compile+link time
use = true

# how to add the schema runtime to the SUT
# available options are: ["inject", "library"]
# runtime = inject

# Default is to inject the runtime in all roots. A root is a file either provided by --in
# or a file in compile_commands.json.
# If specified then the coverage and schemata runtime is only injected in these files.
# paths are relative to root.
# inject_runtime_impl = [["file1.c", "c"], ["file2.c", "cpp"]]

# minimum number of mutants per schema.
# min_mutants_per_schema = 3

# maximum number of mutants per schema (zero means no limit).
# mutants_per_schema = 1000

# sanity check the schemata before it is used by executing the test cases
# it is a slowdown but nice robustness that is usually worth having
check_schemata = true

[coverage]
# Use coverage to reduce the tested mutants
use = true

# how to add the coverage runtime to the SUT
# available options are: ["inject", "library"]
# runtime = inject

# Default is to inject the runtime in all roots. A root is a file either provided by --in
# or a file in compile_commands.json.
# If specified then the coverage and schemata runtime is only injected in these files.
# paths are relative to root.
# inject_runtime_impl = [["file1.c", "c"], ["file2.c", "cpp"]]

[database]

# path (absolute or relative) where mutation statistics will be stored.
db = "dextool_mutate.sqlite3"

[compiler]

# extra flags to pass on to the compiler such as the C++ standard.
# extra_flags = []

# force system includes to use -I instead of -isystem
# force_system_includes = false

# system include paths to use instead of the ones in compile_commands.json
# use_compiler_system_includes = "/path/to/c++"

# allow compilation errors.
# This is useful to active when clang complain about e.g. gcc specific builtins
# allow_errors = true

[compile_commands]

# files and/or directories to look for compile_commands.json.
search_paths = ["./build/compile_commands.json"]

# compile flags to remove when analyzing a file.
# filter = ["-c", "-o", "-m", "-nodevicelib", "-Waddr-space-convert", "-non-static", "-Bstatic", "-Bdynamic", "-Xbind-lazy", "-Xbind-now", "-f", "-static", "-shared", "-rdynamic", "-s", "-l", "-L", "-z", "-u", "-T", "-Xlinker", "-l", "-MT", "-MF", "-MD", "-MQ", "-MMD", "-MP", "-MG", "-E", "-cc1", "-S", "-M", "-MM", "-###"]

# number of compiler arguments to skip from the beginning (needed when the first argument is NOT a compiler but rather a wrapper).
# skip_compiler_args = 0

[mutant_test]

# command to build the program **and** test suite.
build_cmd = ["cd build && make -j $(nproc) rl_test"]

# at least one of test_cmd_dir (recommended) or test_cmd needs to be specified.

# path(s) to recursively look for test binaries to execute.
# test_cmd_dir = ["./build/test"]

# flags to add to all executables found in test_cmd_dir.
# test_cmd_dir_flag = ["--gtest_filter", "-foo*"]

# command(s) to test the program.
# the arguments for test_cmd can be an array of multiple test commands
# 1. ["test1.sh", "test2.sh"]
# 2. [["test1.sh", "-x"], "test2.sh"]
# 3. [["/bin/make", "test"]]
test_cmd = "./build/rl_test"

# timeout to use for the test suite (by default a measurement-based heuristic will be used).
# test_cmd_timeout = "1 hours 1 minutes 1 seconds 1 msecs"

# timeout to use when compiling the program and test suite (default: 30 minutes)
# build_cmd_timeout = "1 hours 1 minutes 1 seconds 1 msecs"

# program used to analyze the output from the test suite for test cases that killed the mutant
# analyze_cmd = "analyze.sh"

# built-in analyzer of output from testing frameworks to find failing test cases
analyze_using_builtin = ["gtest"]

# determine in what order mutants are chosen
# available options are: "random" "consecutive" "bySize"
# order = "random"

# how to behave when new test cases are found
# available options are: "doNothing" "resetAlive"
detected_new_test_case = "resetAlive"

# how to behave when test cases are detected as having been removed
# should the test and the gathered statistics be removed too?
# available options are: "doNothing" "remove"
detected_dropped_test_case = "remove"

# how the oldest mutants should be treated.
# It is recommended to test them again.
# Because you may have changed the test suite so mutants that where previously killed by the test suite now survive.
# available options are: "nothing" "test"
oldest_mutants = "test"

# how many of the oldest mutants to do the above with
# oldest_mutants_nr = 10
# how many of the oldest mutants to do the above with
oldest_mutants_percentage = 50.0

# number of threads to be used when running tests in parallel (default is the number of cores).
# parallel_test = 1

# stop executing tests as soon as a test command fails.
# This speed up the test phase but the report of test cases killing mutants is less accurate
use_early_stop = true

# Enable continues sanity check of the build environment and test suite.
# Run the test suite every 100 mutant to see that the test suite is OK when no mutants are injected.
# If the test suite fails the previous 100 mutants will be reverted and mutation testing stops.
continues_check_test_suite = true

# How often the test suite check is performed
continues_check_test_suite_period = 100

# Compare the checksum of the test binaries with and without a mutant injected to determine which test binaries need to be executed.
# Requires that all `test_cmd`s are binaries, it can not be e.g. make test or scripts.
test_cmd_checksum = true

# Max output to capture from a test case. Useful when e.g. a test case goes into an infinite loop and spew out Gbyte of text.
# Unit is Mbyte
# max_test_cmd_output = 10

[report]

# default style to use
# available options are: "plain" "compiler" "json" "html"
style = "plain"

# default report sections when no --section is specified
# available options are: ["alive", "killed", "all_mut", "summary", "mut_stat", "tc_killed", "tc_stat", "tc_map", "tc_suggestion", "tc_killed_no_mutants", "tc_full_overlap", "tc_full_overlap_with_mutation_id", "tc_groups", "tc_min_set", "tc_similarity", "tc_groups_similarity", "treemap", "mut_recommend_kill", "diff", "tc_unique", "marked_mutants", "trend"]
sections = ["summary"]

# how many mutants to show in the high interest section
# high_interest_mutants_nr = 5

[test_group]

# subgroups with a description and pattern. Example:
# [test_group.uc1]
# description = "use case 1"
# pattern = "uc_1.*"
# see for regex syntax: http://dlang.org/phobos/std_regex.html

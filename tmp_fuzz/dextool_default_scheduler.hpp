/// @file dextool_default_scheduler.hpp
/// @brief Generated by DEXTOOL_VERSION: v1.1.0-204-gb0fe35e
/// DO NOT EDIT THIS FILE, it will be overwritten on update.
#ifndef dextool_default_scheduler_hpp
#define dextool_default_scheduler_hpp
#include "dextool/fuzz_helper.hpp"
#include "dextool/i_scheduler.hpp"
#include "dextool/types.hpp"
#include "dextool/range_check.hpp"

#include "transform_param.hpp"

#ifdef USER_SOURCE
#include "dextool_user_data_source.hpp"
#else
#include "dextool/data_source.hpp"
#endif // USER_SOURCE

#include "transform_param_fuzz.hpp"

namespace dextool {
template<typename CtxT>
class DefaultScheduler : public I_Scheduler {
public:
    DefaultScheduler(CtxT &ctx) : guide_src(ctx.guide_data), inf_src(ctx.inf_data) {}
    virtual ~DefaultScheduler() {}

    virtual void execute() {
        wrap_fa();
    }

    void wrap_fa() {
        fuzz_A ctx(guide_src, inf_src);
        if (!ctx.is_valid) {
            return;
        }
        fa(ctx.x0);
    }

private:
    dextool::GuidedSource<dextool::DefaultSourceType::GuidedType> guide_src;
    dextool::InfiniteSource<dextool::DefaultSourceType::InfiniteType> inf_src;
};

template<typename T>
I_Scheduler* create_scheduler(T &ctx) {
    return new DefaultScheduler<T>(ctx);
}
} //NS:dextool
#endif // dextool_default_scheduler_hpp
